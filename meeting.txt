Chess ENGINE:
- Board
    = Bitboard representation, Little-Endian Rank-File encoding
        - 64 squares in chess, 64 bit integer long representation
        - Bitshifts and bitwise comparisons to compare masks and find paths
    = Static/Statically generated move bitmasks
    = Move valdiation based on Board state and move patterns
        - Current issue is "What makes a move valid?"
        - Current board state, candidate board state
    = Zobrist hashing
    = Board piece representation
    = Moves object queue
        - Ability to go forwards and backwards
    = BOARD_STATE enum

- Move 
    = Origin and destination squares
    = Piece identifier
    = MOVE_TYPE enum

Questions:
- (Hashmap constants) For constants in general, how should they be stored/loaded in? In code vs loading in separate file vs generation at runtime
- Move validity code duplication for CHECK validity vs PROVIDE valid moves 
- When to check for invalid inputs for methods
    = ALWAYS seems wasteful if I'm sure of inputs
    = 