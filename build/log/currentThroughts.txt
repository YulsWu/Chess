HANDLING MOVES IN ENGINE------------------------------------------------------------------------------
Moves vs Special moves (Attacks, en pessant, castling, promotion)

        Internally calculating whether a move is valid before implementing it:
        - Two separate functions?
        -- validMove() checks validity
        -- playMove() implements move, changes pieces on board, changes board STATE
^^^ Realised this is not possible, even basic move valdidity is intrinsically tied to occupancy
- Implement createMove() to check validity and create MOVE, using chess board occupancy
- - Tied to ALL STATES including BOARD Play states
- Still implement playMove() separately to actually move pieces and change board STATE

How to do this?
From the perspective of READING IN MOVES since:
- We read PGNs that don't necessarily specify what type of move it is (other than castling)
- Getting player input would be exactly the same idea (Although we filter for possible moves)

Showing valid moves (Further ahead, think GUI):
- Should be different from implementing moves, as it should SHOW all possible cases
- Once a move is SELECTED, it should be instantiated as a MOVE object with specific type
- Then BOARD can implement the move depending on its TYPE

IMPLEMENTATION:
1. Read moves from PGN/USER based on SQUARES alone
2. Check validity of move and create MOVE object.
    Just check move validity based on masks, assign move TYPE at instantiation (Board is dependent
    on TYPE to determine correct behaviour)
    - Also check for a move putting your king in check
3. Implement move on BOARD
    MOVE should contain all necessary data like piece, move type, exactly

In addition:
- reversePlay() method to reverse a move
- Board will update STATE based on the move just played

EVALUATING BOARD STATE-------------------------------------------------------------------------------
End game conditions:
- Check mate
- Insufficient material
- Time control
- 3-fold repitition (Zobrist)
- 50 move rule (Simple counter)(Claim draw)
- Stalemate
- Mutual draw (Player initiated, board independent)
- Resignations (Player initiated, board independent)

Possible in-play states:
- Check opponent
- Move would put yourself in check
- In play

Forcing states:
- In check



STATE CHECKING:
States to check after each move:
- Checkmate
- Material
- 3 fold repitition
- Draw option for 50 move rule
- Stalemate

States to check before a move (Also informs possible moves for GUI):
(Also FORCING states)
- Player in check, forced moves
- Player move checks themselves

States that can occur at any time:
- Time control
- Mutal draw
- Resignations
- Player invoking 50 turn draw

ISSUE: BOARD VS NEW MOVE HANDLING OF FORCING STATES ---------------------------------------------------------------------------------------
- Initially: ALL created moves are VALID
    - Check W/B_CHECK
    - Check Self-checking moves
- Other states? NO, only FORCING states wait for player valid move input
    - Other states checked in between moves by BOARD
    - ANY TIME states are initiated by player on their turn (All returned values for these are valid as they are coded)

BOARD STATES AFFECTING MOVE VALIDITY:
- W_CHECK/B_CHECK
- All other states excluding IN_PLAY are game ending condition
    -- Candidiate moves would never check a board in a game-end state

CURRENT--------------------------------------------------------------------------------------------
1. Move creation + validation
    - Check occupancy
    - Board STATE (W/B_CHECK)
    - Self-Checking moves
    -- These should be the ONLY things to check other than basic move validity
2. Implementing move
    - Moving and removing pieces
    - Update int[][] board
3. Update board
    - Update bitboard
    - Zobrist hash
    - Flip turn
    - Add move to moveslist
4. Update board STATE
    - Check non game ending states (check)
    - Check for game ending states (end game)
    - Next game loop
** Need to add masks for Castling, 4 in total for each possible castle

Design:
user/player >--- filteredMove ----
                                   \
                                    \
                                        ---> validMove() -- Move Obj. --> Board
                                    /
                                   /
PGN file >-- move --> validator >-    

Moves gathered from the player are pre-filtered as we would only provide the valid moves to select from.
PGN files, while they SHOULD be valid as they are games played already, have no validation currently. Just assuming theyre correct at this point

Changes-
- Move masks to static final, added static initialization
- Working on move validation and move creation
- Creating methods:
    - - Check for forcing board states
    - - See if player is in check
        - Mask valid moves based on checks? - Yes
    - - See if player would put themselves into check with a move
    - - - ** ALL REQUIRE PIECE MASK GENERATION and VALID CHECK EVASION MOVES, Implemnting that FIRST
    - - - ** Added generateValidRookMask, generateValidBishopMask, generateValidQueenMask
    - - - STOPPING HERE ON Feb. 28th - Change names of ^ To something like "combineRays", as self-capture is handled elsewhere,
    - - - OR create methods for ALL masks, and put in a flag for self-capture

TODO:
- Organize database files and engine files. test, entry, PgnParser could stay outside. Shouldn't
break too many dependencies as they're pretty separate.
    - Once in a buildable state, run a test to see if it can build, if so then the move didn't break anything
- Change moveMask constants from ArrayList<Long> to long[]
    - Also change associated generator methods
    - No need for dynamic functions and overhead of ArrayList<Long> for constant move masks.
- Update bitboardVisualize, space out squares more, add file and rank indicators
- Create a visualizer for the actual board state including Piece types,etc
    - Determine good tokens to represent all 10 pieces (wP, bP, wK, wN)
- Change all Long objects to longs to save space

Performance concerns:
- Database stringID comparisons between games when adding
- Static initialization of masks
- Function call overhead vs bitwise operations
    = Whether I should have methods to generate masks for readability or pure code for performance
    = All or nothing, either all are enclosed in functions or NONE are. Makes no sense to have some IN and some OUT, muddies logic
    = Keep in methods for now for readability, expand later if performance is an issue

Legal move determinants:
- (Validity)Piece behaviour: Piece move/ray masks
- (Validity)Board occupancy: Self-capture, enemy captures, and blocking pieces
- (Validity)King moves into enemy vision: it can't
- (Move generation)Forcing move board states: Check evasion
- (Move generation)Invalid subsequent position: Self-checking move

IN_PLAY: All white/black Moves
W_CHECK: White must evade with move
B_CHECK: Black must evade with move

MOVE PUTTING PLAYER IN CHECK

Leaving off:
I THINK I've finished genereateCheckEvasionMoves, needs extensive testing.
Perhaps create something to help with test board generation and such

BoardMaker for testing:
- Done button handlers, switching back to piece board doesn't change labels properly, but to bitboard it is saved