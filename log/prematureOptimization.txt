validateMove() currently calls generateValidMoves() to validate the supplied move, but evaluateGameEndConditions() takes
valid moves as a parameter, causing additional redundant valid move set generations
- Either edit validateMove() to take validMoves as a parameter, or somehow share the valid moves list between the two functions.
- Perhaps an overarching method that combines validateMove(), playMove(), updateState(), and evaluateGameEndConditions()

Statically write masks for move generation rather than generating them programmatically

Re-arrange attack mask generation to two main methods: moveMaskGenerator and attackMaskGenerator for clarity
- Currently generatePieceAttackMask = move (except pawn) + attack for all pieces, generatePawnMoveMask = pawn moves
- moveMaskGenerator: (slidingMask & ^enemyOcc) | (nonSliding & ^(enemyOcc | friendlyOcc))
    - Account for King moving into vision

removeSelfCheckingMoves is needlessly expensive. Can achieve the same result by finding king position, then finding 
opponent vision and seeing if they overlap at all, instead of instantiating a new board.

Zobrist compatibility with external resources
- Load in fixed pre-computed hash tables
- Ensure same PRNG and seed

Save moves as move objects? Equating differently disambiguated algebraic chess moves ie Rad3 vs R3d3 (rook on a3)


